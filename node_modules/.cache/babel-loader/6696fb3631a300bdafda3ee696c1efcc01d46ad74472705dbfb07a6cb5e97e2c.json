{"ast":null,"code":"var _jsxFileName = \"D:\\\\Nikhil\\\\react-http-project\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [planetList, setPlanetList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const getMovies = useCallback(async () => {\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n      if (!response.ok) {\n        throw new Error(\"Something went wrong !\");\n      }\n      const data = await response.json();\n      // eslint-disable-next-line no-unused-expressions\n      const selectedData = data.results.map(movieData => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          release_date: movieData.release_date,\n          opening_crawl: movieData.opening_crawl\n        };\n      });\n      setPlanetList(selectedData);\n    } catch (error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  }, []);\n  useEffect(() => {\n    getMovies();\n  }, [getMovies]);\n  function addMovieHandler(movie) {\n    console.log(movie);\n  }\n  return /*#__PURE__*/_jsxDEV(React.Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(AddMovie, {\n        onAddMovie: addMovieHandler\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getMovies,\n        children: \"Fetch Movies\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n      children: [!isLoading && planetList.length > 0 && /*#__PURE__*/_jsxDEV(MoviesList, {\n        movies: planetList\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 11\n      }, this), !isLoading && planetList.length === 0 && \"Movie Not Found\", !isLoading && error && /*#__PURE__*/_jsxDEV(\"p\", {\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 33\n      }, this), isLoading && \"Loading ... \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IUAjv/3f9GBmPOgzX92F1K8WALY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useCallback","useEffect","useState","MoviesList","AddMovie","jsxDEV","_jsxDEV","App","_s","planetList","setPlanetList","isLoading","setIsLoading","error","setError","getMovies","response","fetch","ok","Error","data","json","selectedData","results","map","movieData","id","episode_id","title","release_date","opening_crawl","message","addMovieHandler","movie","console","log","Fragment","children","onAddMovie","fileName","_jsxFileName","lineNumber","columnNumber","onClick","length","movies","_c","$RefreshReg$"],"sources":["D:/Nikhil/react-http-project/src/App.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from \"react\";\n\nimport MoviesList from \"./components/MoviesList\";\nimport AddMovie from \"./components/AddMovie\";\nimport \"./App.css\";\n\nfunction App() {\n  const [planetList, setPlanetList] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n\n  const getMovies=useCallback(async()=>{\n    setIsLoading(true);\n    setError(null);\n    try {\n      const response = await fetch(\"https://swapi.dev/api/films/\");\n      if (!response.ok) {\n        throw new Error(\"Something went wrong !\");\n      }\n\n      const data = await response.json();\n      // eslint-disable-next-line no-unused-expressions\n      const selectedData = data.results.map((movieData) => {\n        return {\n          id: movieData.episode_id,\n          title: movieData.title,\n          release_date: movieData.release_date,\n          opening_crawl: movieData.opening_crawl,\n        };\n      });\n      setPlanetList(selectedData);\n    } catch(error) {\n      setError(error.message);\n    }\n    setIsLoading(false);\n  },[]);\n\n  useEffect(()=>{\n    getMovies();\n },[getMovies]);\n\n function addMovieHandler(movie) {\n  console.log(movie);\n}\n\n  return (\n    <React.Fragment>\n      <section>\n        <AddMovie onAddMovie={addMovieHandler} />\n      </section>\n      <section>\n        <button onClick={getMovies}>Fetch Movies</button>\n      </section>\n      <section>\n        {!isLoading && planetList.length > 0 && (\n          <MoviesList movies={planetList} />\n        )}\n        {!isLoading && planetList.length === 0 && \"Movie Not Found\"}\n        {!isLoading && error && <p>{error}</p>}\n        {isLoading && \"Loading ... \"}\n      </section>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}